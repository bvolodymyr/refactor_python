# Аналіз коду системи підрахунку очок у тенісі

## Огляд
Цей репозиторій містить реалізацію системи підрахунку очок у тенісному матчі, що представлена у трьох версіях класу `TennisGame`. Кожна з версій має свої особливості в реалізації логіки підрахунку очок та форматування результатів.

### Основні компоненти
#### Класи:
- **`TennisGameDefactored1`** – складна реалізація з великою кількістю умов для обробки очок.
- **`TennisGameDefactored2`** – покращена версія з окремими методами для зміни рахунку та форматування результатів.
- **`TennisGameDefactored3`** – спрощена реалізація, що використовує масиви для назв очок та базову арифметику для визначення рахунку.

#### Методи:
- **`won_point(self, playerName)`** – збільшує очки гравця залежно від введеного імені.
- **`score(self)`** – повертає поточний рахунок у вигляді рядка згідно з правилами тенісу.

### Логіка обчислення рахунку:
- Обробка випадку рівного рахунку (наприклад, `Love-All`, `Fifteen-All`).
- Визначення переваги (`Advantage`) та перемоги (`Win`).
- Форматування рахунку у вигляді, що зрозумілий для користувача (`Love`, `Fifteen`, `Thirty`, `Forty`).

---

## Статичний аналіз коду
Для статичного аналізу коду можна використовувати інструменти для Python, такі як **Pylint** або **PyFlakes**. Вони допоможуть виявити можливі проблеми, зокрема:
- Синтаксичні помилки;
- Невикористані змінні;
- Дублювання коду;
- Надмірна складність.

---

## Виявлені проблеми та їх наслідки

### 1. Дублювання коду
**Проблема:**
- Усі три класи використовують однакову логіку для перетворення очок (`Love`, `Fifteen`, `Thirty`).
- Дублювання значень у різних місцях ускладнює підтримку.

**Наслідки:**
- Важче вносити зміни без ризику помилок.
- Збільшення часу на рефакторинг та оновлення.

### 2. Складність коду
**Проблема:**
- Метод `score()` у `TennisGameDefactored2` занадто великий і містить багато умов.

**Наслідки:**
- Код важко читати та розширювати.
- Високий ризик появи помилок під час змін.

### 3. Неконсистентність у назвах змінних та методів
**Проблема:**
- У `TennisGameDefactored2` використовуються різні стилі назв методів (`SetP1Score`, `P1Score`).

**Наслідки:**
- Код менш зрозумілий для інших розробників.
- Ускладнюється внесення змін та налагодження.

### 4. Хардкодинг значень
**Проблема:**
- Значення `Love`, `Fifteen`, `Thirty`, `Forty` захардкоджені.

**Наслідки:**
- Важче змінювати логіку підрахунку очок.
- Підвищений ризик помилок при оновленнях.

### 5. Відсутність тестів
**Проблема:**
- Код не містить автоматизованих тестів для перевірки підрахунку очок.

**Наслідки:**
- Висока ймовірність помилок при внесенні змін.
- Важко впевнитися у правильності роботи алгоритму.

---

## Рекомендації з покращення коду

### 1. Усунення дублювання коду
- Використовувати **словники або списки** для збереження назв очок.
- Винести загальну логіку підрахунку очок в окремі методи або класи.

### 2. Спрощення методу `score()`
- Розбити метод на **менші логічні частини**.
- Використовувати **словники та списки** замість великої кількості умовних операторів.

### 3. Покращення консистентності
- Дотримуватися **єдиного стилю назв** (наприклад, `set_player1_score()` замість `SetP1Score`).

### 4. Використання констант або Enum
- Замість хардкодингу `Love`, `Fifteen`, `Thirty` використовувати **константи або Enum**.

### 5. Додавання тестів
- Реалізувати **юніт-тести** для перевірки різних сценаріїв гри.
- Використовувати **pytest або unittest** для автоматизованого тестування.

### 6. Інтеграція статичного аналізу
- Використовувати **Pylint** для перевірки якості коду.
- Налаштувати **CI/CD**, щоб запускати тести при кожному коміті.

---

## Висновок
Поточна реалізація підрахунку очок у тенісі працює коректно, але має значний потенціал для покращення. Рефакторинг допоможе зробити код чистішим, зрозумілішим і легшим у підтримці. 

Основні кроки:
1. **Усунення дублювання коду** та використання загальних методів.
2. **Спрощення складних методів**, розділення їх на менші частини.
3. **Уніфікація стилю коду**, покращення консистентності.
4. **Впровадження констант та Enum** для збереження значень очок.
5. **Додавання автоматизованих тестів**.
6. **Інтеграція статичного аналізу коду**.

Ці зміни значно покращать читабельність, підтримуваність та надійність коду.